@page "/category/{name}"
@page "/category/{name}/{page:int}"
@using Bom.Blog.Categories
@using Bom.Blog.Posts
@using System.Collections.ObjectModel
@inject IPostService postService;
@inject ICategoryService categoryService;
@if (posts == null)
{
    <Loading />
}
else
{
    <div class="container">
        <div class="post-wrap tags">
            @if (categoryName != null)
            {
                <h2 class="post-title">-&nbsp;Category&nbsp;·&nbsp;@categoryName&nbsp;-</h2>
            }
        </div>
        <div class="post-wrap archive">
            @if (posts.Any())
            {
                @foreach (var item in posts)
                {
                    <article class="archive-item">
                        <NavLink href="@("/post"+item.Url)">@item.Title</NavLink>
                        <span class="archive-item-date">@item.CreationiTime</span>
                    </article>
                }
                <nav class="pagination">
                    @for (int i = 1; i <= totalPage; i++)
                    {
                        var _page = i;

                        if (page == _page)
                        {
                            <span class="page-number current">@_page</span>
                        }
                        else
                        {
                            <a class="page-number" @onclick="@(() => GetData(_page))" href="/category/@name/@_page">@_page</a>
                        }
                    }
                </nav>
            }
            else
            {
                <ErrorTip />
            }
        </div>
    </div>
}
@code {
    [Parameter]
    public string name { get; set; }
    [Parameter]
    public int? page { get; set; }

    private string categoryName;
    private int total;
    private int totalPage;
    private int maxResultCount = 1;
    private int skipCount = 0;
    private IEnumerable<PostBriefDto> posts;
    protected override async Task OnInitializedAsync()
    {
        await GetData(1);
    }
    private async Task GetData(int page)
    {
        if (string.IsNullOrWhiteSpace(categoryName))
        {
            var category = await categoryService.GetByNameAsync(name);
            categoryName = category.CategoryName;
        }
        var res = await postService.GetListByCategoryNameAsync(new GetPostByCategoryNameListDto() { MaxResultCount = maxResultCount, SkipCount = (page - 1) * maxResultCount, CategoryName = categoryName });
        posts = res.Items;
        total = (int)res.TotalCount;
        totalPage = (int)Math.Ceiling((total / (double)maxResultCount));
    }
}
