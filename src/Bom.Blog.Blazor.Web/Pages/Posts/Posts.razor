@page "/posts/page/{page:int}"
@page "/posts/{page:int}"
@page "/posts"
@using Bom.Blog.Posts
@using System.Diagnostics
@using Volo.Abp.Application.Dtos
@inject IPostService postService
@if (datas == null)
{
    <Loading />
}
else
{
    <div class="post-wrap archive">
        @if (datas.Items.Any())
        {
            @foreach (var item in datas.Items)
            {

                <article class="archive-item">
                    <NavLink href="@("/post" + item.Url)">@item.Title</NavLink>
                    <span class="archive-item-date">@item.CreationiTime</span>
                </article>

            }
            <nav class="pagination">
                @for (int i = 1; i <= totalPage; i++)
                {
                    var _page = i;

                    if (page == _page)
                    {
                        <span class="page-number current">@_page</span>
                    }
                    else
                    {
                        <a class="page-number" @onclick="@(() => GetData(_page))" href="/posts/@_page">@_page</a>
                    }
                }
            </nav>
        }
        else
        {
            <ErrorTip />
        }
    </div>
}

@code {
    [Parameter]
    public int? page { get; set; }

    private int total;
    private int totalPage;
    private int maxResultCount = 1;
    private int skipCount = 0;
    private PagedResultDto<PostBriefDto> datas = null;
    protected override async Task OnInitializedAsync()
    {
        await GetData(1);
    }
    private async Task GetData(int page)
    {
        Debug.WriteLine($"page:{page}");
        var posts = await postService.GetListAsync(new GetPostListDto() { MaxResultCount = maxResultCount, SkipCount = (page - 1) * maxResultCount });
        total = (int)posts.TotalCount;
        totalPage = (int)Math.Ceiling((posts.TotalCount / (double)maxResultCount));
        datas = posts;
    }
    protected override async Task OnParametersSetAsync()
    {
        if (!page.HasValue)
        {
            page = 1;
            await GetData(page.Value);
        }
    }
}
