@using Bom.Blog.Blazor.Web.Common
@using Bom.Blog.Posts
@inject JsInvoker jsInvoker;
<header>
    <nav class="navbar">
        <div class="container">
            <div class="navbar-header header-logo">
                <NavLink class="menu-item" href="/" Match="NavLinkMatch.All">
                    😍阿星Plus
                </NavLink>
            </div>
            <div class="menu navbar-right">
                <NavLink class="menu-item" href="posts">Posts</NavLink>
                <NavLink class="menu-item" href="categories">Categories</NavLink>
                <NavLink class="menu-item" href="tags">Tags</NavLink>
                <NavLink class="menu-item apps" href="apps">Apps</NavLink>
                <input id="switch_default" type="checkbox" class="switch_default" @onchange="SwitchTheme" checked="@(currentTheme == "Dark")" />
                <label for="switch_default" class="toggleBtn"></label>
            </div>
        </div>
    </nav>
    <nav class="navbar-mobile">
        <div class="container">
            <div class="navbar-header">
                <div>
                    <NavLink class="menu-item" href="" Match="NavLinkMatch.All">😍阿星Plus</NavLink>
                    <NavLink @onclick="SwitchTheme">&nbsp;·&nbsp;@currentTheme</NavLink>
                </div>
                <div class="menu-toggle" @onclick="() =>{ collapseMenu = !collapseMenu;}">&#9776; Menu</div>
            </div>
            <div class="menu @navMenuCssClss">
                <NavLink class="menu-item" href="posts">Posts</NavLink>
                <NavLink class="menu-item" href="categories">Categories</NavLink>
                <NavLink class="menu-item" href="tags">Tags</NavLink>
                <NavLink class="menu-item apps" href="apps">Apps</NavLink>
            </div>
        </div>
    </nav>
</header>

@code {
    private bool collapseMenu = false;
    private string navMenuCssClss => collapseMenu ? "active" : null;

    private string currentTheme;
    protected override async Task OnInitializedAsync()
    {
        var currentTheme = await jsInvoker.GetStorageAsync("theme") ?? "Light";
        await jsInvoker.InvokeAsync("window.func.switchTheme");
        await base.OnInitializedAsync();
    }
    private async Task SwitchTheme()
    {
        currentTheme = currentTheme == "Light" ? "Dark" : "Light";
        await jsInvoker.SetStorageAsync("theme", currentTheme);
        await jsInvoker.InvokeAsync("window.func.switchTheme");
    }
}
